'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

SVG.Point = SVG.invent({
  // Initialize
  create: function create(x, y) {
    var i,
        source,
        base = { x: 0, y: 0

      // ensure source as object
    };source = Array.isArray(x) ? { x: x[0], y: x[1] } : (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object' ? { x: x.x, y: x.y } : x != null ? { x: x, y: y != null ? y : x } : base; // If y has no value, then x is used has its value

    // merge source
    this.x = source.x;
    this.y = source.y;
  }

  // Add methods
  , extend: {
    // Clone point
    clone: function clone() {
      return new SVG.Point(this);
    }
    // Morph one point into another
    , morph: function morph(x, y) {
      // store new destination
      this.destination = new SVG.Point(x, y);

      return this;
    }
    // Get morphed point at a given position
    , at: function at(pos) {
      // make sure a destination is defined
      if (!this.destination) return this;

      // calculate morphed matrix at a given position
      var point = new SVG.Point({
        x: this.x + (this.destination.x - this.x) * pos,
        y: this.y + (this.destination.y - this.y) * pos
      });

      return point;
    }
    // Convert to native SVGPoint
    , native: function native() {
      // create new point
      var point = SVG.parser.native.createSVGPoint();

      // update with current values
      point.x = this.x;
      point.y = this.y;

      return point;
    }
    // transform point with matrix
    , transform: function transform(matrix) {
      return new SVG.Point(this.native().matrixTransform(matrix.native()));
    }

  }

});

SVG.extend(SVG.Element, {

  // Get point
  point: function point(x, y) {
    return new SVG.Point(x, y).transform(this.screenCTM().inverse());
  }

});