'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

SVG.extend(SVG.Element, {
  // Remember arbitrary data
  remember: function remember(k, v) {
    // remember every item in an object individually 
    if (_typeof(arguments[0]) == 'object') for (var v in k) {
      this.remember(v, k[v]);
    } // retrieve memory 
    else if (arguments.length == 1) return this.memory()[k];

      // store memory 
      else this.memory()[k] = v;

    return this;
  }

  // Erase a given memory
  , forget: function forget() {
    if (arguments.length == 0) this._memory = {};else for (var i = arguments.length - 1; i >= 0; i--) {
      delete this.memory()[arguments[i]];
    }return this;
  }

  // Initialize or return local memory object
  , memory: function memory() {
    return this._memory || (this._memory = {});
  }

});