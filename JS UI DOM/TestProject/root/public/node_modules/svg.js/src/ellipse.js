'use strict';

SVG.Circle = SVG.invent({
  // Initialize node
  create: 'circle'

  // Inherit from
  , inherit: SVG.Shape

  // Add parent method
  , construct: {
    // Create circle element, based on ellipse
    circle: function circle(size) {
      return this.put(new SVG.Circle()).rx(new SVG.Number(size).divide(2)).move(0, 0);
    }
  }
});

SVG.extend(SVG.Circle, SVG.FX, {
  // Radius x value
  rx: function rx(_rx) {
    return this.attr('r', _rx);
  }
  // Alias radius x value
  , ry: function ry(_ry) {
    return this.rx(_ry);
  }
});

SVG.Ellipse = SVG.invent({
  // Initialize node
  create: 'ellipse'

  // Inherit from
  , inherit: SVG.Shape

  // Add parent method
  , construct: {
    // Create an ellipse
    ellipse: function ellipse(width, height) {
      return this.put(new SVG.Ellipse()).size(width, height).move(0, 0);
    }
  }
});

SVG.extend(SVG.Ellipse, SVG.Rect, SVG.FX, {
  // Radius x value
  rx: function rx(_rx2) {
    return this.attr('rx', _rx2);
  }
  // Radius y value
  , ry: function ry(_ry2) {
    return this.attr('ry', _ry2);
  }
});

// Add common method
SVG.extend(SVG.Circle, SVG.Ellipse, {
  // Move over x-axis
  x: function x(_x) {
    return _x == null ? this.cx() - this.rx() : this.cx(_x + this.rx());
  }
  // Move over y-axis
  , y: function y(_y) {
    return _y == null ? this.cy() - this.ry() : this.cy(_y + this.ry());
  }
  // Move by center over x-axis
  , cx: function cx(x) {
    return x == null ? this.attr('cx') : this.attr('cx', x);
  }
  // Move by center over y-axis
  , cy: function cy(y) {
    return y == null ? this.attr('cy') : this.attr('cy', y);
  }
  // Set width of element
  , width: function width(_width) {
    return _width == null ? this.rx() * 2 : this.rx(new SVG.Number(_width).divide(2));
  }
  // Set height of element
  , height: function height(_height) {
    return _height == null ? this.ry() * 2 : this.ry(new SVG.Number(_height).divide(2));
  }
  // Custom size function
  , size: function size(width, height) {
    var p = proportionalSize(this, width, height);

    return this.rx(new SVG.Number(p.width).divide(2)).ry(new SVG.Number(p.height).divide(2));
  }
});